#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// Wi-Fi 접속정보
const char* ssid = "";
const char* password = "";

// MQTT Broker(Server) 접속정보
const char* mqtt_server = "";
const char* clientName = "";
WiFiClient espClient;
PubSubClient client(espClient);

unsigned long lastMsg = 0;
char msg[50];
int LED = 14;                        // 테스트용 LED가 연결된 핀(D13)
int timeIn = 1000;                   // LED가 깜빡이는 시간을 mqtt 통신에서 전달받아 지정

void setup() {
  pinMode(LED, OUTPUT);
  Serial.begin(115200);
  setup_wifi();                      // Wi-Fi에 접속하는 함수
  client.setServer(mqtt_server, 1883);    

  client.setCallback(callback);
}

void setup_wifi() {
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);        // Wi-Fi 접속
  while (WiFi.status() != WL_CONNECTED) {
    // Wi-Fi에 접속될 때까지 0.5초마다 연결 시도
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("Wi-Fi Connected");
  Serial.println("IP Address: ");
  Serial.println(WiFi.localIP());
}


// 다른 Device에서 MQTT Broker에 메시지를 발행하면 이를 읽어오는 함수(callback)
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);               // 토픽이름 출력
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  String inString="";
  /*
    payload로 들어온 문자를 정수로 바꾸기 위해 inString에 저장한 후에  
    toInt() 함수를 사용해 정수로 바꾸어 timeIn에 저장한다.
  */
  for(int i = 0; i < length; i++) {
    inString += (char)payload[i];
  }
  timeIn = inString.toInt();
}

// MQTT 통신에 지속적으로 참여한다.
void reconnect() {

  while (!client.connected()) {
    Serial.print("Attempting MQTT Connection...");  
    // Attempt to connect
    if (client.connect(clientName)) {     
      Serial.println("Connected");
      // inTopic 이라는 토픽이름으로 "Reconnected"라는 메시지를 발행한다.
      client.publish("inTopic", "Reconnected");
      client.subscribe("outTopic");
    } else {

      Serial.print("Failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      
      delay(5000);
    }
  }
}

void loop() {
  if (!client.connected()) {
    reconnect(); 
  }
  client.loop();

  digitalWrite(LED, LOW);           // Turn the LED ON
  delay(timeIn);                    // Wait for a Second
  digitalWrite(LED, HIGH);          // Turn the LED OFF
  delay(timeIn);                    
}
